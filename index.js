const TelegramApi = require("node-telegram-bot-api");
let { gameOptions, againOptions } = require("./options");
const sequelize = require("./db");
const token = "5854747712:AAHUeuThi2uWaUjwtb15E4KRwEqALyEqqKo";
const UserModel = require("./models");
const bot = new TelegramApi(token, { polling: true });

const chats = {};
let msgAnswer = null;

bot.setMyCommands([
  { command: "/start", description: "–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ" },
  { command: "/info", description: "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" },
  { command: "/game", description: "–ò–≥—Ä–∞: —É–≥–∞–¥–∞–π —Ü–∏—Ñ—Ä—É" },
]);

const startGame = async (chatId) => {
  msgAnswer = await bot.sendMessage(
    chatId,
    "–°–µ–π—á–∞—Å —è –∑–∞–≥–∞–¥–∞—é —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 9, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –µ–µ —É–≥–∞–¥–∞—Ç—å!)"
  );

  console.log(msgAnswer.message_id);
  const randomNumber = Math.floor(Math.random() * 10);
  chats[chatId] = randomNumber;
  await bot.sendMessage(chatId, "–û—Ç–≥–∞–¥—ã–≤–∞–π", gameOptions).then((data) => {});
};

const start = async () => {
  try {
    await sequelize.authenticate();
    await sequelize.sync();
  } catch (e) {
    console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥ —Å–ª–æ–º–∞–ª–æ—Å—å", e);
  }

  bot.on("message", async (msg) => {
    const text = msg.text;
    const chatId = msg.chat.id;

    try {
      if (text === "/start") {
        await UserModel.create({ chatId });
        await bot.sendSticker(
          chatId,
          "https://tlgrm.ru/_/stickers/25e/c00/25ec00bf-b329-37bd-a78c-a148539e049f/1.webp"
        );

        return bot.sendMessage(
          chatId,
          `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∏–Ω—Ç—É–∏—Ü–∏–∏ üí™`
        );
      }

      if (text === "/info") {
        const user = await UserModel.findOne({ chatId });
        return bot.sendMessage(
          chatId,
          `–¢–µ–±—è –∑–æ–≤—É—Ç ${msg.from.first_name}.\n–í –∏–≥—Ä–µ —É —Ç–µ–±—è:\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${user.right}\n–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${user.wrong}`
        );
      }

      if (text === "/game") {
        return startGame(chatId);
      }
      return bot.sendMessage(chatId, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!)");
    } catch (e) {
      const user = await UserModel.findOne({ chatId });
      const userId = user.dataValues.chatId;
      if (userId == msg.chat.id) {
        return bot.sendMessage(
          chatId,
          "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞!\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é."
        );
      } else {
        return bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞!");
      }
    }
  });

  bot.on("callback_query", async (query) => {
    const queryId = query.id;
    try {
      await bot.deleteMessage(query.message.chat.id, query.message.message_id);
      await bot.deleteMessage(query.message.chat.id, msgAnswer.message_id);
    } catch (e) {}

    console.log(queryId);
    const chatId = query.message.chat.id;
    const data = query.data;
    if (data === "/again") {
      await bot.answerCallbackQuery(queryId);
      return startGame(chatId);
    }
    const user = await UserModel.findOne({ chatId });

    if (data == chats[chatId]) {
      await bot.answerCallbackQuery(queryId);
      user.right += 1;
      await bot.sendMessage(
        chatId,
        `ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –æ—Ç–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É: ${chats[chatId]}`,
        againOptions
      );
    } else {
      bot.answerCallbackQuery(queryId);
      user.wrong += 1;
      await bot.sendMessage(
        chatId,
        `üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –Ω–µ —É–≥–∞–¥–∞–ª, –±–æ—Ç –∑–∞–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É: ${chats[chatId]}`,
        againOptions
      );
    }
    await user.save();
  });
};

start();
